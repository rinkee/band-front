"use client";

import { useState, useEffect, useRef } from "react";
import {
  X,
  Package,
  Tag,
  Plus,
  Trash2,
  Check,
  AlertCircle,
  QrCode,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import JsBarcode from "jsbarcode";
import { useProductClientMutations } from "../hooks/useProductsClient.js";

// 바코드 컴포넌트
const Barcode = ({ value, width = 1.5, height = 40 }) => {
  const barcodeRef = useRef(null);

  useEffect(() => {
    if (barcodeRef.current && value) {
      try {
        JsBarcode(barcodeRef.current, value, {
          format: "CODE128",
          lineColor: "#000",
          width: width,
          height: height,
          displayValue: true,
          fontSize: 12,
          margin: 5,
          background: "#FFFFFF",
        });
      } catch (error) {
        console.error("바코드 생성 오류:", error);
        if (barcodeRef.current) {
          barcodeRef.current.innerHTML = `<text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="red" font-size="12">Error</text>`;
        }
      }
    } else if (barcodeRef.current) {
      barcodeRef.current.innerHTML = "";
    }
  }, [value, width, height]);

  return <svg ref={barcodeRef}></svg>;
};

// 로딩 스피너
function LoadingSpinner({ className = "h-5 w-5", color = "text-gray-500" }) {
  return (
    <svg
      className={`animate-spin ${color} ${className}`}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      ></path>
    </svg>
  );
}

// 바코드 옵션 관리자
function BarcodeOptionsManager({ product, onUpdate, userId }) {
  const [barcodeOptions, setBarcodeOptions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const { patchProduct } = useProductClientMutations();

  // 초기값 설정
  useEffect(() => {
    if (
      product?.barcode_options?.options &&
      product.barcode_options.options.length > 0
    ) {
      const optionsWithId = product.barcode_options.options.map(
        (option, index) => ({
          ...option,
          id: option.id || `option_${Date.now()}_${index}`,
        })
      );
      setBarcodeOptions(optionsWithId);
    } else {
      // priceOptions를 기반으로 자동 바코드 옵션 생성
      const autoGeneratedOptions =
        generateBarcodeOptionsFromPriceOptions(product);
      setBarcodeOptions(autoGeneratedOptions);
    }
  }, [product]);

  // priceOptions를 기반으로 바코드 옵션 자동 생성
  const generateBarcodeOptionsFromPriceOptions = (product) => {
    const priceOptions = product?.price_options || [];
    const baseBarcode =
      product?.barcode || `BC${Date.now().toString().slice(-8)}`;

    if (priceOptions.length === 0) {
      // priceOptions가 없으면 기본 옵션만 생성
      return [
        {
          id: `main_${Date.now()}`,
          name: "기본상품",
          price: product?.base_price || 0,
          barcode: baseBarcode,
          is_main: true,
        },
      ];
    }

    // priceOptions를 기반으로 바코드 옵션 생성
    const generatedOptions = priceOptions.map((option, index) => {
      const isMain = index === 0; // 첫 번째 옵션을 기본으로 설정
      const optionBarcode = isMain
        ? baseBarcode
        : generateUniqueBarcode(baseBarcode, [baseBarcode], `OPT${index + 1}`);

      return {
        id: isMain ? `main_${Date.now()}` : `option_${Date.now()}_${index}`,
        name: option.description || `옵션 ${index + 1}`,
        price: option.price,
        barcode: optionBarcode,
        is_main: isMain,
      };
    });

    console.log(
      `[자동 바코드 생성] ${product.title}에 대해 ${generatedOptions.length}개 옵션 생성:`,
      generatedOptions
    );
    return generatedOptions;
  };

  // 고유한 바코드 생성 함수
  const generateUniqueBarcode = (
    baseBarcode,
    existingBarcodes,
    suffix = ""
  ) => {
    if (!baseBarcode) {
      baseBarcode = `BC${Date.now().toString().slice(-8)}`;
    }

    let newBarcode = suffix
      ? `${baseBarcode}${suffix}`
      : `${baseBarcode}OPT${Date.now().toString().slice(-4)}`;
    let counter = 1;

    while (existingBarcodes.includes(newBarcode)) {
      newBarcode = `${baseBarcode}OPT${Date.now()
        .toString()
        .slice(-4)}${counter}`;
      counter++;
    }

    return newBarcode;
  };

  // 바코드 추가
  const addOption = () => {
    if (barcodeOptions.length >= 4) {
      alert("바코드 옵션은 최대 4개까지 추가할 수 있습니다.");
      return;
    }

    const barcodeNumber =
      barcodeOptions.filter((opt) => !opt.is_main).length + 1;
    const newOption = {
      id: `option_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      name: `바코드${barcodeNumber}`,
      price: product?.base_price || 0,
      barcode: "",
      is_main: false,
    };
    setBarcodeOptions([...barcodeOptions, newOption]);
  };

  // 옵션 삭제
  const removeOption = (optionId) => {
    const optionToRemove = barcodeOptions.find((opt) => opt.id === optionId);
    if (optionToRemove?.is_main) {
      alert("기본 옵션은 삭제할 수 없습니다.");
      return;
    }
    setBarcodeOptions(barcodeOptions.filter((opt) => opt.id !== optionId));
  };

  // 옵션 수정
  const updateOption = (optionId, field, value) => {
    setBarcodeOptions((prev) =>
      prev.map((opt) =>
        opt.id === optionId ? { ...opt, [field]: value } : opt
      )
    );
  };

  // 저장 함수 - products 페이지와 동일한 방식으로 변경
  const saveOptions = async () => {
    if (!userId) {
      setError("사용자 정보가 없습니다.");
      return;
    }

    // 유효성 검사
    const hasEmptyFields = barcodeOptions.some(
      (opt) => !opt.name.trim() || !opt.barcode.trim() || opt.price <= 0
    );
    if (hasEmptyFields) {
      setError("모든 바코드의 이름, 바코드, 가격을 입력해주세요.");
      return;
    }

    // 중복 바코드 검사
    const barcodeMap = new Map();
    const duplicates = [];
    barcodeOptions.forEach((opt) => {
      const barcode = opt.barcode.trim();
      if (barcodeMap.has(barcode)) {
        if (!duplicates.includes(barcode)) {
          duplicates.push(barcode);
        }
      } else {
        barcodeMap.set(barcode, true);
      }
    });

    if (duplicates.length > 0) {
      setError(`중복된 바코드가 있습니다: ${duplicates.join(", ")}`);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // 메인 바코드 찾기
      const mainBarcode =
        barcodeOptions.find((opt) => opt.is_main)?.barcode || "";

      // 바코드 옵션 데이터 준비
      const barcodeOptionsData = {
        options: barcodeOptions.map((option) => ({
          id: option.id,
          name: option.name,
          price: option.price,
          barcode: option.barcode,
          is_main: option.is_main || false,
        })),
        updated_at: new Date().toISOString(),
      };

      console.log(
        `[바코드 저장] 상품 ${product.product_id}에 바코드 옵션 저장:`,
        barcodeOptionsData
      );

      // products 페이지와 같은 방식으로 저장 - Supabase 클라이언트 직접 사용
      const updateData = {
        barcode: mainBarcode,
        barcode_options: barcodeOptionsData,
      };

      const updatedProduct = await patchProduct(
        product.product_id,
        updateData,
        userId
      );

      console.log("바코드 저장 성공:", updatedProduct);
      alert("바코드 옵션이 성공적으로 저장되었습니다.");
      onUpdate && onUpdate(updatedProduct);
    } catch (error) {
      console.error("바코드 저장 오류:", error);
      setError(
        error.message || "바코드 저장에 실패했습니다. 다시 시도해주세요."
      );
    } finally {
      setIsLoading(false);
    }
  };

  // 중복 바코드 체크
  const duplicateBarcodes = [];
  const barcodeMap = new Map();
  barcodeOptions.forEach((opt) => {
    if (opt.barcode && barcodeMap.has(opt.barcode)) {
      if (!duplicateBarcodes.includes(opt.barcode)) {
        duplicateBarcodes.push(opt.barcode);
      }
    } else if (opt.barcode) {
      barcodeMap.set(opt.barcode, true);
    }
  });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-start">
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-1">
            바코드 관리
          </h3>
          <div className="flex items-center gap-3 text-sm">
            <span className="text-gray-600">
              총 {barcodeOptions.length}개 바코드
            </span>
            {duplicateBarcodes.length > 0 ? (
              <span className="inline-flex items-center gap-1 px-2 py-1 text-xs bg-red-100 text-red-700 rounded-full">
                <AlertCircle className="w-3 h-3" />
                중복 {duplicateBarcodes.length}개
              </span>
            ) : (
              <span className="inline-flex items-center gap-1 px-2 py-1 text-xs bg-green-100 text-green-700 rounded-full">
                <Check className="w-3 h-3" />
                모두 고유함
              </span>
            )}
          </div>
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => {
              const autoOptions =
                generateBarcodeOptionsFromPriceOptions(product);
              setBarcodeOptions(autoOptions);
            }}
            className="px-3 py-1.5 text-sm rounded-md transition-colors flex items-center gap-1 bg-emerald-100 text-emerald-700 hover:bg-emerald-200 border border-emerald-200"
          >
            <QrCode className="w-4 h-4" />
            자동 생성
          </button>
          <button
            onClick={addOption}
            disabled={barcodeOptions.length >= 4}
            className={`px-3 py-1.5 text-sm rounded-md transition-colors flex items-center gap-1 ${
              barcodeOptions.length >= 4
                ? "bg-gray-100 text-gray-400 cursor-not-allowed border border-gray-200"
                : "bg-sky-100 text-sky-700 hover:bg-sky-200 border border-sky-200"
            }`}
          >
            <Plus className="w-4 h-4" />
            바코드 추가 ({barcodeOptions.length}/4)
          </button>
        </div>
      </div>

      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
          {error}
        </div>
      )}

      <div className="space-y-3">
        {barcodeOptions.map((option, index) => (
          <div key={option.id} className="p-4 bg-gray-50 rounded-lg">
            <div className="flex justify-between items-start mb-3">
              <span className="text-sm font-medium text-gray-700 px-2 py-1 bg-white rounded-md">
                {option.is_main ? "기본" : `바코드 ${index}`}
              </span>
              {!option.is_main && (
                <button
                  onClick={() => removeOption(option.id)}
                  className="text-red-500 hover:text-red-700 p-1 hover:bg-red-50 rounded-md transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              )}
            </div>

            {/* 가로 배치된 입력 필드들 */}
            <div className="grid grid-cols-12 gap-3 items-end">
              {/* 바코드명 */}
              <div className="col-span-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  바코드명 <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={option.name}
                  onChange={(e) =>
                    updateOption(option.id, "name", e.target.value)
                  }
                  placeholder="예: 대용량, 프리미엄"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
                  disabled={option.is_main}
                />
              </div>

              {/* 기본가 */}
              <div className="col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  기본가 <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={option.price === 0 ? "" : option.price}
                  onChange={(e) => {
                    const value = e.target.value;
                    if (value === "" || /^\d+$/.test(value)) {
                      updateOption(
                        option.id,
                        "price",
                        value === "" ? 0 : parseInt(value)
                      );
                    }
                  }}
                  placeholder="가격"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white"
                />
              </div>

              {/* 바코드 입력 */}
              <div className="col-span-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  바코드 <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={option.barcode}
                    onChange={(e) => {
                      const value = e.target.value.replace(/[^a-zA-Z0-9]/g, "");
                      updateOption(option.id, "barcode", value);
                    }}
                    placeholder="바코드 번호 (영문, 숫자만)"
                    className={`w-full px-3 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 bg-white ${
                      option.barcode &&
                      barcodeOptions.filter(
                        (opt) =>
                          opt.id !== option.id && opt.barcode === option.barcode
                      ).length > 0
                        ? "border-red-300 focus:ring-red-500 focus:border-red-500"
                        : "border-gray-300 focus:ring-blue-500 focus:border-blue-500"
                    }`}
                  />
                  {option.barcode &&
                    barcodeOptions.filter(
                      (opt) =>
                        opt.id !== option.id && opt.barcode === option.barcode
                    ).length > 0 && (
                      <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                        <AlertCircle className="h-4 w-4 text-red-500" />
                      </div>
                    )}
                </div>
                {option.barcode &&
                  barcodeOptions.filter(
                    (opt) =>
                      opt.id !== option.id && opt.barcode === option.barcode
                  ).length > 0 && (
                    <p className="mt-1 text-xs text-red-600">
                      ⚠️ 이 바코드는 이미 사용 중입니다
                    </p>
                  )}
              </div>

              {/* 바코드 미리보기 */}
              <div className="col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  미리보기
                </label>
                <div className="h-10 flex items-center justify-center bg-white rounded-lg">
                  {option.barcode ? (
                    <Barcode value={option.barcode} height={24} width={1} />
                  ) : (
                    <span className="text-xs text-gray-400">
                      바코드 입력 시 표시
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="flex justify-end pt-4 border-t border-gray-200">
        <button
          onClick={saveOptions}
          disabled={isLoading}
          className="px-6 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 font-medium"
        >
          {isLoading ? (
            <>
              <LoadingSpinner className="w-4 h-4" color="text-white" />
              저장 중...
            </>
          ) : (
            <>
              <Check className="w-4 h-4" />
              저장하기
            </>
          )}
        </button>
      </div>
    </div>
  );
}

export default function ProductBarcodeModal({
  isOpen,
  onClose,
  postId,
  userId,
  onProductUpdate,
}) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isContentExpanded, setIsContentExpanded] = useState(false);

  useEffect(() => {
    if (isOpen && postId && userId) {
      fetchPostDetails();
    } else {
      setData(null);
    }
  }, [isOpen, postId, userId]);

  const fetchPostDetails = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`/api/posts/${postId}?userId=${userId}`);
      const result = await response.json();

      if (response.ok) {
        setData(result);
      } else {
        setError(result.error || "데이터를 불러오는데 실패했습니다.");
      }
    } catch (error) {
      console.error("Error fetching post details:", error);
      setError("네트워크 오류가 발생했습니다.");
    } finally {
      setLoading(false);
    }
  };

  const formatPrice = (price) => {
    if (typeof price !== "number") return "0원";
    return `${price.toLocaleString()}원`;
  };

  const handleProductUpdate = (updatedProduct) => {
    // 상품 업데이트 후 데이터 새로고침
    fetchPostDetails();
    // 상위 컴포넌트도 갱신
    if (onProductUpdate) {
      onProductUpdate(updatedProduct);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-xl max-w-5xl w-full max-h-[90vh] overflow-hidden flex flex-col">
        {/* 고정 헤더 */}
        <div className="sticky top-0 z-10 bg-white px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">
              상품 바코드 관리
            </h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 hover:bg-gray-100 p-2 rounded-lg transition-colors"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* 스크롤 가능한 내용 */}
        <div className="flex-1 overflow-y-auto p-6">
          {loading && (
            <div className="flex items-center justify-center h-64">
              <div className="text-center">
                <LoadingSpinner className="w-8 h-8 mx-auto mb-4" />
                <div className="text-gray-600">데이터를 불러오는 중...</div>
              </div>
            </div>
          )}

          {error && (
            <div className="flex items-center justify-center h-64">
              <div className="text-red-600 p-4 bg-red-50 rounded-lg border border-red-200">
                {error}
              </div>
            </div>
          )}

          {data && !loading && !error && (
            <div className="space-y-6">
              {/* 게시물 정보 */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-medium text-gray-900 mb-2">
                  {data.post.title || "제목 없음"}
                </h3>
                <div className="text-sm text-gray-600">
                  <div className={isContentExpanded ? "" : "line-clamp-3"}>
                    {data.post.content}
                  </div>
                  {data.post.content && data.post.content.length > 150 && (
                    <button
                      onClick={() => setIsContentExpanded(!isContentExpanded)}
                      className="mt-2 flex items-center gap-1 text-blue-600 hover:text-blue-800 transition-colors text-xs font-medium"
                    >
                      {isContentExpanded ? (
                        <>
                          <ChevronUp className="w-3 h-3" />
                          접기
                        </>
                      ) : (
                        <>
                          <ChevronDown className="w-3 h-3" />
                          더보기
                        </>
                      )}
                    </button>
                  )}
                </div>
              </div>

              {/* 상품 목록 */}
              {data.products && data.products.length > 0 ? (
                <div className="space-y-6">
                  <h3 className="text-lg font-medium text-gray-900 flex items-center gap-2">
                    <Package className="w-5 h-5" />
                    상품 목록 ({data.products.length}개)
                  </h3>

                  {data.products.map((product) => (
                    <div
                      key={product.product_id}
                      className="bg-white p-6 rounded-lg border border-gray-200"
                    >
                      {/* 상품 기본 정보 */}
                      <div className="flex items-start justify-between mb-6">
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900 mb-2 text-lg">
                            {product.title}
                          </h4>
                          <div className="flex items-center gap-4 text-sm text-gray-600 mb-3">
                            {product.barcode && (
                              <span className="flex items-center gap-1">
                                <QrCode className="w-4 h-4" />
                                {product.barcode}
                              </span>
                            )}
                          </div>

                          {/* 가격 옵션 정보 - 옵션이 있을 때만 표시 */}
                          {product.price_options &&
                            product.price_options.length > 0 && (
                              <div className="bg-blue-50 p-3 rounded-lg mt-3">
                                <div className="text-sm font-medium text-blue-900 mb-2">
                                  가격 옵션 ({product.price_options.length}개)
                                </div>
                                <div className="space-y-1">
                                  {product.price_options.map(
                                    (option, index) => (
                                      <div
                                        key={index}
                                        className="flex text-sm text-blue-800"
                                      >
                                        <span>{option.description}</span>
                                        <span className="ml-5 font-medium">
                                          {formatPrice(option.price)}
                                        </span>
                                      </div>
                                    )
                                  )}
                                </div>
                              </div>
                            )}
                        </div>
                      </div>

                      {/* 바코드 옵션 관리 */}
                      <BarcodeOptionsManager
                        product={product}
                        onUpdate={handleProductUpdate}
                        userId={userId}
                      />
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  <Package className="w-12 h-12 mx-auto mb-4 text-gray-400" />
                  <p>이 게시물에는 상품이 없습니다.</p>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
